# .bashrc
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# Mar-2014 glt Put under git control, commit history = modification history
# Feb-16 glt    Add .secret_key inclusion
# Apr-15 glt    Add "eternal history" (from Stackoverflow 9457233/unlimited-bash-history)
# Nov-14 glt    Change "exit" to "return" in interactivity test
#               because exiting was causing X11/XQuartz to fail to start.
# Mar-14 glt    Moved PATH changing code form .bashrc_aliases
#               Removed chroot_debian code and added git branch to prompt
#	            	Add defines to support Emacs as a Daemon
# Nov-13 glt	Added PKG_CONFIG_PATH
# Jul-09 glt	Added code from my personal bash preference file

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
test "$PS1" || return

#++
# Set any secret keys
secret_key_file=~/.secret_key_file
test -e $secret_key_file && source $secret_key_file

which brew > /dev/null 2>&1 && {
  case $HOMEBREW_GITHUB_API_TOKEN in
    "")
      export HOMEBREW_GITHUB_API_TOKEN="not defined"
      echo >&2 "? Warning: HOMEBREW_GITHUB_API_TOKEN undefined.  Add to $secret_key_file"
      ;;
  esac
}
#
#--

#++
# Global editor info
export VIM_APP_DIR=/Applications  # 4/29: System Macvim is newer than brew version, so override for now
export ALTERNATE_EDITOR=""
# export EDITOR=emacsclient
export EDITOR=vim
#
#--

export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig # Needed for X11/XQuartz

# -s[et] shell options
#  notify:    print bg job notifications immediately
#  ignoreeof: Require at least 10 EOFs before terminating a shell
set -o notify
set -o ignoreeof

#  checkwinsize: check window size after every command, updating LINES & COLUMNS if needed.
shopt -s checkwinsize

# set default file protection to 750
# umask 027
# set default file protection to 770
umask 007
# for Omnicell, set default file protestion to 775
umask 002

#++
# Prompt Setting code
export CLICOLOR=true
color_prompt=
test $force_color_prompt &&
  test -x /usr/bin/tput &&
  tput setaf 1 >&/dev/null &&
  color_prompt=yes

# function for PS1 to display [ git branch] when it is defined
function __show_git_branch() {
  branch=`git rev-parse --abbrev-ref HEAD 2>/dev/null`
  test -n "$branch" && echo " [$branch]"
}

# Most interesting prompt escapes:
#    \h - hostname up until first '.'  (\H for entire)
#    \j - # jobs managed by shell
#    \u - username,
#    \w - cwd, \W - cwd basename
#    \! - cmd history number
#    \[ \] - put around escape sequences so that they do not confuse ^A and friends
#-
# Set AF color indices:
#   Color  Value
#   black    0
#   red      1
#   green    2
#   yellow   3
#   blue     4
#   magenta  5
#   cyan     6
#   white    7
# basic B&W prompt: PS1='-- \u@\h:\w$(__show_git_branch) --\n\!\$ '
# While potentially nice for basic interaction, this trap causes pipes to hang
# until CTRL-C is typed
#trap '[[ -t 1 ]] && tput sgr0' DEBUG  # deactivate all post-command graphics
case $USER in
  root)  # root in red (setaf 1)
    PS1='\[$(tput setaf 1)\]-- \u@\[$(tput bold)\]\h\[$(tput sgr0; tput setaf 1)\]:\w$(__show_git_branch) --\[$(tput sgr0)\]\n\!\$ '
    ;;
  *)     # non-root in grey (setaf 7)
    PS1='\[$(tput setaf 7)\]-- \u@\[$(tput setaf 3)\]\h\[$(tput sgr0; tput setaf 7)\]:\w$(__show_git_branch) --\[$(tput sgr0)\]\n\!\$ '
    ;;
esac

# add indicator to prompt for invocation depth
case $SHLVL in
  1) PS1="${PS1}";;
  2) PS1="${PS1}> " ;;
  *) PS1="${PS1}>> " ;;
esac

#
#-- end Prompt setting code

#++
# PATH adjustment code
#
# {app,pre}pend_to path-var-name dirpath
# remove_from path-var-name dirpath
#
# Functions to manipulate a path-style variable.  {app,pre}pend_to
# both remove any other instances of dirname before adding it to
# the start or end of the path-var-name variable.
#
# Calling example:
#   append_to PATH "/usr/local/bin"
#
# Uses eval to allow target path varname to be passed in.
function remove_from() {
  eval tmp_path=":\$${1}:"                           # add surrounding colons
  (echo "$tmp_path" | grep --silent ":${2}:") &&     # dir present?, remove it
    tmp_path=`echo "$tmp_path" | sed "s=:${2}:=:=g"`
  tmp_path=`echo "$tmp_path" | sed 's=^:==; s=:$=='` # rm surrounding colons
  eval export $1=\"$tmp_path\"
}
function append_to() {
  remove_from "$1" "$2"  # clean the path contents
  eval export $1=\"\$${1}:$2\"
}
function prepend_to() {
  remove_from "$1" "$2"  # clean the path contents
  eval export $1=\"${2}:\$$1\"
}

# add paths for Linux brew
case $(uname) in
  Linux)
    prepend_to PATH "$HOME/.linuxbrew/bin"
    prepend_to PATH "$HOME/.linuxbrew/sbin"
    prepend_to MANPATH "$HOME/.linuxbrew/share/man"
    prepend_to INFOPATH "$HOME/.linuxbrew/share/info"
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

# add directories to PATH
# Move /usr/local/bin to front, if it is already there.  Add it to the front, if not.
prepend_to PATH /usr/local/bin
append_to PATH "~/bin"
append_to PATH /usr/sbin

# Add local node_modules directory to the path
prepend_to PATH ./node_modules/.bin

### Added for the Heroku Toolbelt
prepend_to PATH /usr/local/heroku/bin

# Add MH directory
test -d /usr/bin/mh && {
  append_to PATH /usr/bin/mh
}

test -d /usr/local/nmh && {
  append_to PATH /usr/local/nmh/bin
  test $MANPATH || export MANPATH=`man -w` # no manpath? Set to default.
  append_to MANPATH /usr/local/nmh/share/man
}

case $(uname) in
  *)
    # gt 2013: Enable shims and autocomplete for Ruby and completion for Brew
    which rbenv > /dev/null 2>&1 &&
      eval "$(rbenv  init - )"
    export PATH

    # gt 2018: Enable shims and autocomplete for java
    which jenv > /dev/null 2>&1 && {
      eval "$(jenv init - | sed 's/export PATH=/prepend_to PATH /;s/:.*/"/')"
      export PATH
      export JAVA_HOME="$(/usr/libexec/java_home -v 1.8)"
    }

    #++
    # gt 2022: add completion extensions
    bash_completion="$(brew --prefix)/etc/bash_completion"
    git_completion="/usr/local/etc/bash_completion.d/git-completion.bash" # use brew version, if it exists
    test -f $git_completion || git_completion="~/.git-completion.bash"    # use local version, otherwise

    # load all the additional completion files
    for completion_file in $bash_completion $git_completion ~/.hub.bash_completion.sh
    do
      test -f $completion_file && . $completion_file
    done
    #--

    # gt 2018: configure FZF to use Silver Searcher, if it is installed
    which ag > /dev/null 2>&1 &&
      export FZF_DEFAULT_COMMAND='ag -g ""'
    ;;
esac

# Added for homebrew
prepend_to PATH /usr/local/sbin

# only use RVM if we create the ~/use_rvm file
test -e ~/use_rvm && {
  append_to PATH ~/.rvm/bin # Add RVM to PATH for scripting
  remove_from PATH
}

# Ensure that QT v5 packags is found first so that the system's V4 package is skipped
# Technically, the backtick substitution should be run, but it takes > .5s, so assume QT5 present if dir is there.
# qt5_prefix=$(brew --prefix qt@5.5 > /dev/null)
qt5_prefix='/usr/local/opt/qt@5.5'
[ -d $qt5_prefix ] &&  prepend_to PATH $qt5_prefix/bin
#-- end PATH adjustments
#
# Add Rancher Desktop dir to PATH so the command line args will be available
append_to PATH ~/.rd/bin

#++
# Bash history configuration

#  histappend: append to history file, do not overwrite
shopt -s histappend

# Do not put duplicate lines in the history and and do not save commands
# that begin with space. See bash(1) for more options
# export HISTCONTROL=ignoreboth

# Eternal bash history.
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%m-%d% %T] "

# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/._bash_eternal_history

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
#
#--

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/5932/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

# define default location for DOCKER PMAP loading for Omnicell laptop
case `hostname` in
  m-dev-gtarsa*|OM-C02G63BSMD6R|mbp-tarsa)
    base_dir=~/src/work
    export DOCK_PMAPWEB=$base_dir/trunk
    export DOCK_COMPONENT=$base_dir/docker-pmap/ci-2.0/component
    export DOCK_DATASETS=$base_dir/datasets-trunk
    export DOCK_IMPORT_SCRIPTS=$base_dir/docker-pmap/messaging-campaign-reports-trunk
    export DOCK_TOOL=$base_dir/docker-pmap/ci-2.0/tool
    export DOCK_OCP_REPO=~/src/work/ocp-configuration-app

    # source locations
    export DOCK_HR_HOME=~/src/work/health-review-app
    export DOCK_WELLIE_REPO=/Users/5932/src/work/web-chat-bot

    export DOCK_MVNREPO=~/.m2/repository

    # DOCK_DATABASE is a restart-all-the-containers.sh convention in dc/docker-compose.*.yml files
    export DOCK_DATASET=demo-dev-gis

    export REPOS='https://subversion.ateb.com/repos'
    repos=$REPOS

    # update timestamp on favorite aliases (so they show up early in sorted Finder # windows)
    for dir in ~/Downloads/PBIs ~/Downloads/MBO-stuff
    do
      echo $dir
      [ -L $dir ] && echo "updating $dir" && touch -h $dir
    done

    # Needed for brew installed groovy to run
    export GROOVY_HOME=/usr/local/opt/groovy/libexec
    ;;
esac

# enable fzf shell integration
eval "$(fzf --bash)"

#++
# Alias definitions.
# Be sure to put this after all PATH adjustments

test -f ~/.bash_aliases && source ~/.bash_aliases
usenode 18

#
#--

